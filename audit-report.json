{"database":{"advisory-count":555,"last-commit":"98e8483ac17d42eeeeee51d4d02ad8a690bd12c7","last-updated":"2023-07-29T17:20:00Z"},"lockfile":{"dependency-count":305},"settings":{"target_arch":null,"target_os":null,"severity":null,"ignore":[],"informational_warnings":["unmaintained","unsound","notice"]},"vulnerabilities":{"found":true,"count":6,"list":[{"advisory":{"id":"RUSTSEC-2023-0034","package":"h2","title":"Resource exhaustion vulnerability in h2 may lead to Denial of Service (DoS)","description":"If an attacker is able to flood the network with pairs of `HEADERS`/`RST_STREAM` frames, such that the `h2` application is not able to accept them faster than the bytes are received, the pending accept queue can grow in memory usage. Being able to do this consistently can result in excessive memory use, and eventually trigger Out Of Memory.\n\nThis flaw is corrected in [hyperium/h2#668](https://github.com/hyperium/h2/pull/668), which restricts remote reset stream count by default.","date":"2023-04-14","aliases":["CVE-2023-26964","GHSA-f8vr-r385-rh5r"],"related":[],"collection":"crates","categories":["denial-of-service"],"keywords":["http","http2","h2"],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/hyperium/hyper/issues/2877","withdrawn":null},"versions":{"patched":[">=0.3.17"],"unaffected":[]},"affected":null,"package":{"name":"h2","version":"0.3.15","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"5f9f29bc9dda355256b2916cf526ab02ce0aeaaaf2bad60d65ef3f12f11dd0f4","dependencies":[{"name":"bytes","version":"1.4.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"fnv","version":"1.0.7","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"futures-core","version":"0.3.28","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"futures-sink","version":"0.3.28","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"futures-util","version":"0.3.28","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"http","version":"0.2.8","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"indexmap","version":"1.9.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"slab","version":"0.4.7","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"tokio","version":"1.25.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"tokio-util","version":"0.7.6","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"tracing","version":"0.1.37","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2023-0044","package":"openssl","title":"`openssl` `X509VerifyParamRef::set_host` buffer over-read","description":"When this function was passed an empty string, `openssl` would attempt to call `strlen` on it, reading arbitrary memory until it reached a NUL byte.","date":"2023-06-20","aliases":["GHSA-xcf7-rvmh-g6q4"],"related":[],"collection":"crates","categories":["memory-exposure"],"keywords":[],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/sfackler/rust-openssl/issues/1965","withdrawn":null},"versions":{"patched":[">=0.10.55"],"unaffected":[]},"affected":{"arch":[],"os":[],"functions":{"openssl::x509::verify::X509VerifyParamRef::set_host":["<0.10.55, >=0.10.0"]}},"package":{"name":"openssl","version":"0.10.45","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"b102428fd03bc5edf97f62620f7298614c45cedf287c271e7ed450bbaf83f2e1","dependencies":[{"name":"bitflags","version":"1.3.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"cfg-if","version":"1.0.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"foreign-types","version":"0.3.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"libc","version":"0.2.147","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"once_cell","version":"1.17.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"openssl-macros","version":"0.1.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"openssl-sys","version":"0.9.80","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2023-0024","package":"openssl","title":"`openssl` `X509Extension::new` and `X509Extension::new_nid` null pointer dereference","description":"These functions would crash when the context argument was None with certain extension types.\n\nThanks to David Benjamin (Google) for reporting this issue.","date":"2023-03-24","aliases":["GHSA-6hcf-g6gr-hhcr"],"related":[],"collection":"crates","categories":["denial-of-service"],"keywords":[],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/sfackler/rust-openssl/pull/1854","withdrawn":null},"versions":{"patched":[">=0.10.48"],"unaffected":[]},"affected":{"arch":[],"os":[],"functions":{"openssl::x509::X509Extension::new":["<0.10.48, >=0.9.7"],"openssl::x509::X509Extension::new_nid":["<0.10.48, >=0.9.7"]}},"package":{"name":"openssl","version":"0.10.45","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"b102428fd03bc5edf97f62620f7298614c45cedf287c271e7ed450bbaf83f2e1","dependencies":[{"name":"bitflags","version":"1.3.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"cfg-if","version":"1.0.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"foreign-types","version":"0.3.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"libc","version":"0.2.147","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"once_cell","version":"1.17.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"openssl-macros","version":"0.1.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"openssl-sys","version":"0.9.80","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2023-0023","package":"openssl","title":"`openssl` `SubjectAlternativeName` and `ExtendedKeyUsage::other` allow arbitrary file read","description":"`SubjectAlternativeName` and `ExtendedKeyUsage` arguments were parsed using the OpenSSL\nfunction `X509V3_EXT_nconf`. This function parses all input using an OpenSSL mini-language\nwhich can perform arbitrary file reads.\n\nThanks to David Benjamin (Google) for reporting this issue.","date":"2023-03-24","aliases":["GHSA-9qwg-crg9-m2vc"],"related":[],"collection":"crates","categories":["file-disclosure"],"keywords":[],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/sfackler/rust-openssl/pull/1854","withdrawn":null},"versions":{"patched":[">=0.10.48"],"unaffected":[]},"affected":{"arch":[],"os":[],"functions":{"openssl::x509::extension::ExtendedKeyUsage::other":["<0.10.48, >=0.9.7"],"openssl::x509::extension::SubjectAlternativeName::new":["<0.10.48, >=0.9.7"]}},"package":{"name":"openssl","version":"0.10.45","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"b102428fd03bc5edf97f62620f7298614c45cedf287c271e7ed450bbaf83f2e1","dependencies":[{"name":"bitflags","version":"1.3.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"cfg-if","version":"1.0.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"foreign-types","version":"0.3.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"libc","version":"0.2.147","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"once_cell","version":"1.17.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"openssl-macros","version":"0.1.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"openssl-sys","version":"0.9.80","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2023-0022","package":"openssl","title":"`openssl` `X509NameBuilder::build` returned object is not thread safe","description":"OpenSSL has a `modified` bit that it can set on on `X509_NAME` objects. If this\nbit is set then the object is not thread-safe even when it appears the code is\nnot modifying the value.\n\nThanks to David Benjamin (Google) for reporting this issue.","date":"2023-03-24","aliases":["GHSA-3gxf-9r58-2ghg"],"related":[],"collection":"crates","categories":["thread-safety"],"keywords":[],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/sfackler/rust-openssl/pull/1854","withdrawn":null},"versions":{"patched":[">=0.10.48"],"unaffected":[]},"affected":{"arch":[],"os":[],"functions":{"openssl::x509::X509NameBuilder::build":["<0.10.48, >=0.9.7"]}},"package":{"name":"openssl","version":"0.10.45","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"b102428fd03bc5edf97f62620f7298614c45cedf287c271e7ed450bbaf83f2e1","dependencies":[{"name":"bitflags","version":"1.3.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"cfg-if","version":"1.0.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"foreign-types","version":"0.3.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"libc","version":"0.2.147","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"once_cell","version":"1.17.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"openssl-macros","version":"0.1.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"openssl-sys","version":"0.9.80","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2020-0071","package":"time","title":"Potential segfault in the time crate","description":"### Impact\n\nUnix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.\n\nThe affected functions from time 0.2.7 through 0.2.22 are:\n\n- `time::UtcOffset::local_offset_at`\n- `time::UtcOffset::try_local_offset_at`\n- `time::UtcOffset::current_local_offset`\n- `time::UtcOffset::try_current_local_offset`\n- `time::OffsetDateTime::now_local`\n- `time::OffsetDateTime::try_now_local`\n\nThe affected functions in time 0.1 (all versions) are:\n\n- `at`\n- `at_utc`\n- `now`\n\nNon-Unix targets (including Windows and wasm) are unaffected.\n\n### Patches\n\nPending a proper fix, the internal method that determines the local offset has been modified to always return `None` on the affected operating systems. This has the effect of returning an `Err` on the `try_*` methods and `UTC` on the non-`try_*` methods.\n\nUsers and library authors with time in their dependency tree should perform `cargo update`, which will pull in the updated, unaffected code.\n\nUsers of time 0.1 do not have a patch and should upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.\n\n### Workarounds\n\nA possible workaround for crates affected through the transitive dependency in `chrono`, is to avoid using the default `oldtime` feature dependency of the `chrono` crate by disabling its `default-features` and manually specifying the required features instead.\n\n#### Examples:\n\n`Cargo.toml`:  \n\n```toml\nchrono = { version = \"0.4\", default-features = false, features = [\"serde\"] }\n```\n\n```toml\nchrono = { version = \"0.4.22\", default-features = false, features = [\"clock\"] }\n```\n\nCommandline:  \n\n```bash\ncargo add chrono --no-default-features -F clock\n```\n\nSources:  \n - [chronotope/chrono#602 (comment)](https://github.com/chronotope/chrono/issues/602#issuecomment-1242149249)  \n - [vityafx/serde-aux#21](https://github.com/vityafx/serde-aux/issues/21)","date":"2020-11-18","aliases":["CVE-2020-26235","GHSA-wcg3-cvx6-7396"],"related":[],"collection":"crates","categories":["code-execution","memory-corruption"],"keywords":["segfault"],"cvss":"CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H","informational":null,"references":[],"source":null,"url":"https://github.com/time-rs/time/issues/293","withdrawn":null},"versions":{"patched":[">=0.2.23"],"unaffected":["=0.2.0","=0.2.1","=0.2.2","=0.2.3","=0.2.4","=0.2.5","=0.2.6"]},"affected":{"arch":[],"os":["linux","redox","solaris","android","ios","macos","netbsd","openbsd","freebsd"],"functions":{"time::OffsetDateTime::now_local":["<0.2.23"],"time::OffsetDateTime::try_now_local":["<0.2.23"],"time::UtcOffset::current_local_offset":["<0.2.23"],"time::UtcOffset::local_offset_at":["<0.2.23"],"time::UtcOffset::try_current_local_offset":["<0.2.23"],"time::UtcOffset::try_local_offset_at":["<0.2.23"],"time::at":["^0.1"],"time::at_utc":["^0.1"],"time::now":["^0.1"]}},"package":{"name":"time","version":"0.1.45","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"1b797afad3f312d1c66a56d11d0316f916356d11bd158fbc6ca6389ff6bf805a","dependencies":[{"name":"libc","version":"0.2.147","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"wasi","version":"0.10.0+wasi-snapshot-preview1","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"winapi","version":"0.3.9","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}}]},"warnings":{"yanked":[{"kind":"yanked","package":{"name":"crossbeam-channel","version":"0.5.6","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"c2dd04ddaf88237dc3b8d8f9a3c1004b506b54b3313403944054d23c0870c521","dependencies":[{"name":"cfg-if","version":"1.0.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"crossbeam-utils","version":"0.8.14","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null},"advisory":null,"versions":null},{"kind":"yanked","package":{"name":"hermit-abi","version":"0.3.1","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286","replace":null},"advisory":null,"versions":null}]}}